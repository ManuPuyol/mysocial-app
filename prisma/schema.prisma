// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mongodb"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  name         String?
  username     String         @unique
  password     String
  profileImage String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  refreshToken RefreshToken[]
  post         Post[]
  mediaFiles   MediaFile[]
}

model RefreshToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  //Author
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
  replayToId String?  @db.ObjectId
  replayTo   Post?    @relation("replies", fields: [replayToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies    Post[]   @relation("replies")

  //MediaFiles
  mediaFiles MediaFile[]
}

model MediaFile {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  url              String
  providerPublicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //User
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  //Posts
  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId
}
